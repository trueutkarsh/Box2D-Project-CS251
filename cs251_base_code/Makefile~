.SUFFIXES: .cpp .hpp

# Programs
SHELL 	= bash
CC     	= g++ -pg
LD	= ld
RM 	= rm -rf
ECHO	= /bin/echo
CAT	= cat
PRINTF	= printf
SED	= sed
DOXYGEN = doxygen
GPROF = gprof
DOT = dot -Tpng
PYTHON = python
PDFLATEX = pdflatex
######################################
# Project Name (generate executable with this name)
TARGET = cs251_base

# Project Paths
PROJECT_ROOT=.
EXTERNAL_ROOT=$(PROJECT_ROOT)/external
SRCDIR = $(PROJECT_ROOT)/src
OBJDIR = $(PROJECT_ROOT)/obj
BINDIR = $(PROJECT_ROOT)/bin
DOCDIR = $(PROJECT_ROOT)/doc
PROFILE = $(PROJECT_ROOT)/project_profile
# Library Paths
BOX2D_ROOT=$(EXTERNAL_ROOT)
GLUI_ROOT=/usr
GL_ROOT=/usr/include/

#Libraries
LIBS = -lBox2D -lglui -lglut -lGLU -lGL

# Compiler and Linker flags
CPPFLAGS =-g -O3 -Wall -fno-strict-aliasing
CPPFLAGS+=-I $(BOX2D_ROOT)/include -I $(GLUI_ROOT)/include
LDFLAGS+=-L $(BOX2D_ROOT)/lib -L $(GLUI_ROOT)/lib

######################################

NO_COLOR=\e[0m
OK_COLOR=\e[1;32m
ERR_COLOR=\e[1;31m
WARN_COLOR=\e[1;33m
MESG_COLOR=\e[1;34m
FILE_COLOR=\e[1;37m

OK_STRING="[OK]"
ERR_STRING="[ERRORS]"
WARN_STRING="[WARNINGS]"
OK_FMT="${OK_COLOR}%30s\n${NO_COLOR}"
ERR_FMT="${ERR_COLOR}%30s\n${NO_COLOR}"
WARN_FMT="${WARN_COLOR}%30s\n${NO_COLOR}"
######################################

SRCS := $(wildcard $(SRCDIR)/*.cpp)
INCS := $(wildcard $(SRCDIR)/*.hpp)

OBJS := $(SRCS:$(SRCDIR)/%.cpp=$(OBJDIR)/%.o)


.PHONY: all setup doc clean distclean release profile report codeDoc

all: setup $(BINDIR)/$(TARGET)

codeDoc:
	@$(ECHO) -n "Generating Doxygen Documentation Of Group-23...  "
	@$(RM) -rf doc/html
	@$(DOXYGEN) $(DOCDIR)/Doxyfile 2 > /dev/null 2>&1
	@$(ECHO) "Done"

report:reportp
	@cd ./report/finalreport ;\
	$(PDFLATEX) main.tex 2>&1 > /dev/null
	@$(RM) ./report/finalreport/main.log
	@$(RM) ./report/finalreport/main.aux
	@$(RM) ./report/finalreport/main.out


reportp:
	@cd ./report/presentation ;\
	$(PDFLATEX) main.tex > /dev/null
	@$(RM) ./report/presentation/main.log
	@$(RM) ./report/presentation/main.aux
	@$(RM) ./report/presentation/main.out
	@$(RM) ./report/presentation/main.nav
	@$(RM) ./report/presentation/main.anm
	@$(RM) ./report/presentation/main.toc
	@$(RM) ./report/presentation/main.snm


profile:
	@if [ ! -f "$(PROJECT_ROOT)/gmon.out" ] ; then \ 2>&1
		$(PRINTF) 'Please run the executable from the project directory through terminal once before profiling..\n' ;\
	fi

	@if [ -f "$(PROJECT_ROOT)/gmon.out" ] ; then 2>&1
		$(PRINTF) "Profiling \n"
		mkdir -p project_profile ;\
		$(GPROF) $(PROJECT_ROOT)/bin/cs251_base $(PROJECT_ROOT)/gmon.out > $(PROFILE)/Analysis.txt ;\ 
		$(PRINTF) "Generating analysis txt file\n"
		$(PYTHON) gprof2dot.py $(PROFILE)/Analysis.txt > $(PROFILE)/Analysis.dot ;\
		$(PRINTF) "Generating Call Graph"
		$(DOT) $(PROFILE)/Analysis.dot  -o $(PROFILE)/Callgraph.png ;\
		$(PRINTF) "Done\n" ;\
	fi


release: profile report setup $(BINDIR)/$(TARGET)




setup:
	@$(ECHO) "Setting up compilation..."
	@mkdir -p obj
	@mkdir -p bin

$(BINDIR)/$(TARGET): $(OBJS)
	@$(PRINTF) "$(MESG_COLOR)Building executable:$(NO_COLOR) $(FILE_COLOR) %16s$(NO_COLOR)" "$(notdir $@)"
	@$(CC) -O3 -o $@ $(LDFLAGS) $(OBJS) $(LIBS) 2> temp.log || touch temp.err
	@if test -e temp.err; \
	then $(PRINTF) $(ERR_FMT) $(ERR_STRING) && $(CAT) temp.log; \
	elif test -s temp.log; \
	then $(PRINTF) $(WARN_FMT) $(WARN_STRING) && $(CAT) temp.log; \
	else $(PRINTF) $(OK_FMT) $(OK_STRING); \
	fi;
	@$(RM) -f temp.log temp.err

-include -include $(OBJS:.o=.d)

$(OBJS): $(OBJDIR)/%.o : $(SRCDIR)/%.cpp
	@$(PRINTF) "$(MESG_COLOR)Compiling: $(NO_COLOR) $(FILE_COLOR) %25s$(NO_COLOR)" "$(notdir $<)"
	@$(CC) -O3 $(CPPFLAGS) -c $< -o $@ -MD 2> temp.log || touch temp.err
	@if test -e temp.err; \
	then $(PRINTF) $(ERR_FMT) $(ERR_STRING) && $(CAT) temp.log; \
	elif test -s temp.log; \
	then $(PRINTF) $(WARN_FMT) $(WARN_STRING) && $(CAT) temp.log; \
	else printf "${OK_COLOR}%30s\n${NO_COLOR}" "[OK]"; \
	fi;
	@$(RM) -f temp.log temp.err


clean:
	@$(ECHO) -n "Cleaning up..."
	@$(RM) $(OBJDIR)/* $(SRCDIR)/*~ $(BINDIR)/* $(PROFILE)/*
	@$(ECHO) "Done"
	@$(RM) ./report/presentation/main.pdf
	@$(RM) ./report/finalreport/main.pdf

distclean: clean
	@$(RM) $(BINDIR) $(OBJDIR) $(DOCDIR)/html $(PROFILE)
